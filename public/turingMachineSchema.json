{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Turing Machine Configuration Schema",
  "description": "JSON Schema for a multi-tape Turing Machine configuration, for use with Monaco-YAML.",
  "type": "object",
  "additionalProperties": false,
  "required": [
    "tapes",
    "input",
    "blank",
    "startstate",
    "table"
  ],
  "properties": {
    "tapes": {
      "type": "integer",
      "enum": [1, 2, 3, 4, 5, 6],
      "description": "Number of tapes in the Turing Machine (1 to 6)."
    },
    "input": {
      "type": "string",
      "description": "Initial content on each tape, separated by '/'. The number of segments must equal the number of tapes. Use empty segments (e.g. 'abc//def') for blank tapes."
    },
    "blank": {
      "type": "string",
      "minLength": 1,
      "maxLength": 1,
      "pattern": "^(?![\\/\\[\\],]).$",
      "description": "The blank symbol (single character) used for empty cells on the tape."
    },
    "startstate": {
      "type": "string",
      "minLength": 1,
      "pattern": "^[^\\s/\\[\\],]+$",
      "description": "Name of the starting state."
    },
    "table": {
      "type": "object",
      "description": "Transition table mapping each state to its transitions.",
      "propertyNames": {
        "type": "string",
        "pattern": "^[^\\s/\\[\\],]+$",
        "description": "State name (no spaces, slashes, commas or brackets)."
      }
    }
  },
  "examples": [
    {
      "tapes": 2,
      "input": "1011/",
      "blank": " ",
      "startstate": "right",
      "table": {
        "right": {
          "1/0": "R/L",
          "0/1": "R/S",
          "[0/2, 1/2]": {
            "write": "0/1",
            "L/R": "done"
          }
        },
        "carry": {
          "1/0": {
            "write": "0/1",
            "L/R": null
          },
          "0/1": {
            "write": "same/0",
            "R/L": "done"
          },
          "0/0": {
            "write": "1/0",
            "L/R": "done"
          },
          " / ": {
            "write": "1/0",
            "L/R": "done"
          },
          "all/0": "S/R"
        },
        "done": {}
      }
    }
  ],
  "allOf": [
    {
      "if": { "properties": { "tapes": { "const": 1 } } },
      "then": {
        "properties": {
          "input": { "pattern": "^[^/]*$" },
          "table": {
            "additionalProperties": {
              "type": "object",
              "patternProperties": {
                "^(?:\\[\\s*(?:all|[^/\\[\\],])(?:\\s*,\\s*(?:all|[^/\\[\\],]))*\\s*\\]|(?:all|[^/\\[\\],]))$": {
                  "description": "Transition condition(s) for 1 tape. Format: symbol on the tape (no '/'). Use 'all' to match any symbol, and space ( ) to represent the blank symbol. Multiple conditions can be grouped in [brackets] separated by commas.",
                  "oneOf": [
                    {
                      "type": "string",
                      "pattern": "^(?:L|R|S)$",
                      "description": "For 1 tape:\nKey = transition condition, format: symbol (use 'all' for any symbol, space for blank). Group multiple conditions in [brackets, comma-separated].\nValue = action. Either a movement string like L (move tape head), or an object:\nExample:\n  1: \"R\"\n  [0, 1]: {write: 0, R: done}"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "write": {
                          "type": "string",
                          "pattern": "^(?:same|[^/\\[\\],])$",
                          "description": "Symbol to write on the tape. Use 'same' to leave the symbol unchanged."
                        }
                      },
                      "patternProperties": {
                        "^(?:L|R|S)$": {
                          "type": ["string", "null"],
                          "description": "Head movement direction (L=Left, R=Right, S=Stay). The value is the next state name, or null to remain in the current state."
                        }
                      },
                      "additionalProperties": false,
                      "if": { "required": ["write"] },
                      "then": { "minProperties": 2, "maxProperties": 2 },
                      "else": { "minProperties": 1, "maxProperties": 1 },
                      "description": "Actions for this transition: write a symbol then move the head. Include exactly one key indicating the head movement (e.g. 'L') with its value as the next state (or null to stay in the current state)."
                    },
                    {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                            "pattern": "^(?:L|R|S)$",
                            "description": "For 1 tape: (Same format as single action string above)"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "write": {
                                "type": "string",
                                "pattern": "^(?:same|[^/\\[\\],])$",
                                "description": "Symbol to write on the tape (or 'same' to leave unchanged)."
                              }
                            },
                            "patternProperties": {
                              "^(?:L|R|S)$": {
                                "type": ["string", "null"],
                                "description": "Head movement direction (L, R, S). Value is next state name, or null to stay in current state."
                              }
                            },
                            "additionalProperties": false,
                            "if": { "required": ["write"] },
                            "then": { "minProperties": 2, "maxProperties": 2 },
                            "else": { "minProperties": 1, "maxProperties": 1 },
                            "description": "Same format as single action object above."
                          }
                        ]
                      },
                      "description": "Multiple possible actions (nondeterministic). A list of actions, each either a movement string or an object as defined above."
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          }
        }
      }
    },
    {
      "if": { "properties": { "tapes": { "const": 2 } } },
      "then": {
        "properties": {
          "input": { "pattern": "^[^/]*(?:/[^/]*)?$" },
          "table": {
            "additionalProperties": {
              "type": "object",
              "patternProperties": {
                "^(?:\\[\\s*(?:all|[^/\\[\\],])(?:\\/(?:all|[^/\\[\\],])){1}(?:\\s*,\\s*(?:all|[^/\\[\\],])(?:\\/(?:all|[^/\\[\\],])){1})*\\s*\\]|(?:all|[^/\\[\\],])\\/(?:all|[^/\\[\\],]))$": {
                  "description": "Transition condition(s) for 2 tapes. Format: symbol1/symbol2 for the two tapes. Use 'all' to match any symbol on a tape, and space ( ) to represent the blank symbol. Multiple conditions can be grouped in [brackets] separated by commas.",
                  "oneOf": [
                    {
                      "type": "string",
                      "pattern": "^(?:L|R|S)\\/(?:L|R|S)$",
                      "description": "For 2 tapes:\nKey = transition condition, format: symbol1/symbol2 (use 'all' for any symbol, space for blank). Group multiple conditions in [brackets, comma-separated].\nValue = action. Either a movement string like L/R (move both tape heads), or an object:\nExample:\n  1/0: \"R/L\"\n  [0/1, 1/1]: {write: 0/1, L/R: done}"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "write": {
                          "type": "string",
                          "pattern": "^(?:same|[^/\\[\\],])\\/(?:same|[^/\\[\\],])$",
                          "description": "Symbols to write on each of the 2 tapes, separated by '/'. Use 'same' to leave a tape's symbol unchanged."
                        }
                      },
                      "patternProperties": {
                        "^(?:L|R|S)\\/(?:L|R|S)$": {
                          "type": ["string", "null"],
                          "description": "Head movement directions for each tape, separated by '/'. Each letter is L (left), R (right), or S (stay). The value is the next state name, or null to remain in the current state."
                        }
                      },
                      "additionalProperties": false,
                      "if": { "required": ["write"] },
                      "then": { "minProperties": 2, "maxProperties": 2 },
                      "else": { "minProperties": 1, "maxProperties": 1 },
                      "description": "Actions for this transition: write symbol(s) to tapes then move heads. Include exactly one key indicating the head movements (e.g. 'L/R') with its value as the next state (or null to stay in the current state)."
                    },
                    {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                            "pattern": "^(?:L|R|S)\\/(?:L|R|S)$"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "write": {
                                "type": "string",
                                "pattern": "^(?:same|[^/\\[\\],])\\/(?:same|[^/\\[\\],])$"
                              }
                            },
                            "patternProperties": {
                              "^(?:L|R|S)\\/(?:L|R|S)$": {
                                "type": ["string", "null"]
                              }
                            },
                            "additionalProperties": false,
                            "if": { "required": ["write"] },
                            "then": { "minProperties": 2, "maxProperties": 2 },
                            "else": { "minProperties": 1, "maxProperties": 1 }
                          }
                        ]
                      },
                      "description": "Multiple possible actions (list of movement strings or objects as above) for nondeterministic 2-tape transitions."
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          }
        }
      }
    },
    {
      "if": { "properties": { "tapes": { "const": 3 } } },
      "then": {
        "properties": {
          "input": { "pattern": "^[^/]*(?:/[^/]*){0,2}$" },
          "table": {
            "additionalProperties": {
              "type": "object",
              "patternProperties": {
                "^(?:\\[\\s*(?:all|[^/\\[\\],])(?:\\/(?:all|[^/\\[\\],])){2}(?:\\s*,\\s*(?:all|[^/\\[\\],])(?:\\/(?:all|[^/\\[\\],])){2})*\\s*\\]|(?:all|[^/\\[\\],])(?:\\/(?:all|[^/\\[\\],])){2})$": {
                  "description": "Transition condition(s) for 3 tapes. Format: sym1/sym2/sym3 for the three tapes. Use 'all' for any symbol, space ( ) for blank. Multiple conditions can be grouped in [brackets] separated by commas.",
                  "oneOf": [
                    {
                      "type": "string",
                      "pattern": "^(?:L|R|S)(?:\\/(?:L|R|S)){2}$",
                      "description": "For 3 tapes:\nKey = transition condition, format: symbol1/symbol2/symbol3 (use 'all' for any symbol, space for blank). Group multiple conditions in [brackets, comma-separated].\nValue = action. Either a movement string like L/R/S (move tape heads), or an object:\nExample:\n  1/0/1: \"R/L/S\"\n  [0/1/0, 1/1/1]: {write: 0/1/1, L/R/S: done}"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "write": {
                          "type": "string",
                          "pattern": "^(?:same|[^/\\[\\],])(?:\\/(?:same|[^/\\[\\],])){2}$",
                          "description": "Symbols to write on each of the 3 tapes, separated by '/'. Use 'same' to leave a tape's symbol unchanged."
                        }
                      },
                      "patternProperties": {
                        "^(?:L|R|S)(?:\\/(?:L|R|S)){2}$": {
                          "type": ["string", "null"],
                          "description": "Head movement directions (L, R, S for each tape), separated by '/'. The value is the next state name, or null to remain in the current state."
                        }
                      },
                      "additionalProperties": false,
                      "if": { "required": ["write"] },
                      "then": { "minProperties": 2, "maxProperties": 2 },
                      "else": { "minProperties": 1, "maxProperties": 1 },
                      "description": "Actions: write symbols then move 3 heads. Include one key for head movements (e.g. 'L/R/S') with its value as the next state (or null to stay)."
                    },
                    {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                            "pattern": "^(?:L|R|S)(?:\\/(?:L|R|S)){2}$"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "write": {
                                "type": "string",
                                "pattern": "^(?:same|[^/\\[\\],])(?:\\/(?:same|[^/\\[\\],])){2}$"
                              }
                            },
                            "patternProperties": {
                              "^(?:L|R|S)(?:\\/(?:L|R|S)){2}$": {
                                "type": ["string", "null"]
                              }
                            },
                            "additionalProperties": false,
                            "if": { "required": ["write"] },
                            "then": { "minProperties": 2, "maxProperties": 2 },
                            "else": { "minProperties": 1, "maxProperties": 1 }
                          }
                        ]
                      },
                      "description": "Multiple possible actions for 3 tapes (array of strings or objects as above)."
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          }
        }
      }
    },
    {
      "if": { "properties": { "tapes": { "const": 4 } } },
      "then": {
        "properties": {
          "input": { "pattern": "^[^/]*(?:/[^/]*){0,3}$" },
          "table": {
            "additionalProperties": {
              "type": "object",
              "patternProperties": {
                "^(?:\\[\\s*(?:all|[^/\\[\\],])(?:\\/(?:all|[^/\\[\\],])){3}(?:\\s*,\\s*(?:all|[^/\\[\\],])(?:\\/(?:all|[^/\\[\\],])){3})*\\s*\\]|(?:all|[^/\\[\\],])(?:\\/(?:all|[^/\\[\\],])){3})$": {
                  "description": "Transition condition(s) for 4 tapes. Format: sym1/sym2/sym3/sym4. Use 'all' for any symbol, space ( ) for blank. Multiple conditions can be grouped in [brackets].",
                  "oneOf": [
                    {
                      "type": "string",
                      "pattern": "^(?:L|R|S)(?:\\/(?:L|R|S)){3}$",
                      "description": "For 4 tapes:\nKey = transition condition, format: symbol1/symbol2/symbol3/symbol4 (use 'all' for any symbol, space for blank). Group multiple conditions in [brackets, comma-separated].\nValue = action. Either a movement string like L/R/S/S (move tape heads), or an object:\nExample:\n  1/0/1/0: \"R/L/S/R\"\n  [0/1/0/0, 1/1/1/1]: {write: 0/1/1/0, L/R/S/L: done}"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "write": {
                          "type": "string",
                          "pattern": "^(?:same|[^/\\[\\],])(?:\\/(?:same|[^/\\[\\],])){3}$",
                          "description": "Symbols to write on each of the 4 tapes, separated by '/'. Use 'same' to leave a symbol unchanged."
                        }
                      },
                      "patternProperties": {
                        "^(?:L|R|S)(?:\\/(?:L|R|S)){3}$": {
                          "type": ["string", "null"],
                          "description": "Head movement directions for 4 tapes, separated by '/'. Letters are L, R, S. Value is next state name or null to stay in current state."
                        }
                      },
                      "additionalProperties": false,
                      "if": { "required": ["write"] },
                      "then": { "minProperties": 2, "maxProperties": 2 },
                      "else": { "minProperties": 1, "maxProperties": 1 },
                      "description": "Actions: write symbols then move 4 heads. Include one head-movement key (e.g. 'L/R/R/S') with value as next state (or null to stay)."
                    },
                    {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                            "pattern": "^(?:L|R|S)(?:\\/(?:L|R|S)){3}$"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "write": {
                                "type": "string",
                                "pattern": "^(?:same|[^/\\[\\],])(?:\\/(?:same|[^/\\[\\],])){3}$"
                              }
                            },
                            "patternProperties": {
                              "^(?:L|R|S)(?:\\/(?:L|R|S)){3}$": {
                                "type": ["string", "null"]
                              }
                            },
                            "additionalProperties": false,
                            "if": { "required": ["write"] },
                            "then": { "minProperties": 2, "maxProperties": 2 },
                            "else": { "minProperties": 1, "maxProperties": 1 }
                          }
                        ]
                      },
                      "description": "Multiple possible actions for 4 tapes (array of allowed actions)."
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          }
        }
      }
    },
    {
      "if": { "properties": { "tapes": { "const": 5 } } },
      "then": {
        "properties": {
          "input": { "pattern": "^[^/]*(?:/[^/]*){0,4}$" },
          "table": {
            "additionalProperties": {
              "type": "object",
              "patternProperties": {
                "^(?:\\[\\s*(?:all|[^/\\[\\],])(?:\\/(?:all|[^/\\[\\],])){4}(?:\\s*,\\s*(?:all|[^/\\[\\],])(?:\\/(?:all|[^/\\[\\],])){4})*\\s*\\]|(?:all|[^/\\[\\],])(?:\\/(?:all|[^/\\[\\],])){4})$": {
                  "description": "Transition condition(s) for 5 tapes. Format: sym1/sym2/sym3/sym4/sym5. Use 'all' for any symbol, space ( ) for blank. Multiple conditions can be grouped in [brackets].",
                  "oneOf": [
                    {
                      "type": "string",
                      "pattern": "^(?:L|R|S)(?:\\/(?:L|R|S)){4}$",
                      "description": "For 5 tapes:\nKey = transition condition, format: symbol1/symbol2/symbol3/symbol4/symbol5 (use 'all' for any symbol, space for blank). Group multiple conditions in [brackets, comma-separated].\nValue = action. Either a movement string like L/R/S/S/R (move tape heads), or an object:\nExample:\n  1/0/1/0/1: \"R/L/S/R/S\"\n  [0/1/0/0/1, 1/1/1/1/0]: {write: 0/1/1/0/1, L/R/S/L/R: done}"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "write": {
                          "type": "string",
                          "pattern": "^(?:same|[^/\\[\\],])(?:\\/(?:same|[^/\\[\\],])){4}$",
                          "description": "Symbols to write on each of the 5 tapes, separated by '/'. Use 'same' to leave a symbol unchanged."
                        }
                      },
                      "patternProperties": {
                        "^(?:L|R|S)(?:\\/(?:L|R|S)){4}$": {
                          "type": ["string", "null"],
                          "description": "Head movement directions for 5 tapes, separated by '/'. Letters: L, R, S. Value is next state name or null to stay."
                        }
                      },
                      "additionalProperties": false,
                      "if": { "required": ["write"] },
                      "then": { "minProperties": 2, "maxProperties": 2 },
                      "else": { "minProperties": 1, "maxProperties": 1 },
                      "description": "Actions: write symbols then move 5 heads. Include one head-movement key (e.g. 'L/R/S/R/L') with value as next state (or null to stay)."
                    },
                    {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                            "pattern": "^(?:L|R|S)(?:\\/(?:L|R|S)){4}$"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "write": {
                                "type": "string",
                                "pattern": "^(?:same|[^/\\[\\],])(?:\\/(?:same|[^/\\[\\],])){4}$"
                              }
                            },
                            "patternProperties": {
                              "^(?:L|R|S)(?:\\/(?:L|R|S)){4}$": {
                                "type": ["string", "null"]
                              }
                            },
                            "additionalProperties": false,
                            "if": { "required": ["write"] },
                            "then": { "minProperties": 2, "maxProperties": 2 },
                            "else": { "minProperties": 1, "maxProperties": 1 }
                          }
                        ]
                      },
                      "description": "Multiple possible actions for 5 tapes (array of transitions)."
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          }
        }
      }
    },
    {
      "if": { "properties": { "tapes": { "const": 6 } } },
      "then": {
        "properties": {
          "input": { "pattern": "^[^/]*(?:/[^/]*){0,5}$" },
          "table": {
            "additionalProperties": {
              "type": "object",
              "patternProperties": {
                "^(?:\\[\\s*(?:all|[^/\\[\\],])(?:\\/(?:all|[^/\\[\\],])){5}(?:\\s*,\\s*(?:all|[^/\\[\\],])(?:\\/(?:all|[^/\\[\\],])){5})*\\s*\\]|(?:all|[^/\\[\\],])(?:\\/(?:all|[^/\\[\\],])){5})$": {
                  "description": "Transition condition(s) for 6 tapes. Format: sym1/sym2/sym3/sym4/sym5/sym6. Use 'all' for any symbol, space ( ) for blank. Multiple conditions can be grouped in [brackets].",
                  "oneOf": [
                    {
                      "type": "string",
                      "pattern": "^(?:L|R|S)(?:\\/(?:L|R|S)){5}$",
                      "description": "For 6 tapes:\nKey = transition condition, format: symbol1/symbol2/symbol3/sym4/sym5/sym6 (use 'all' for any symbol, space for blank). Group multiple conditions in [brackets, comma-separated].\nValue = action. Either a movement string like L/R/S/S/R/L (move tape heads), or an object:\nExample:\n  1/0/1/0/1/0: \"R/L/S/R/S/L\"\n  [0/1/0/0/1/1, 1/1/1/1/0/0]: {write: 0/1/1/0/1/1, L/R/S/L/R/S: done}"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "write": {
                          "type": "string",
                          "pattern": "^(?:same|[^/\\[\\],])(?:\\/(?:same|[^/\\[\\],])){5}$",
                          "description": "Symbols to write on each of the 6 tapes, separated by '/'. Use 'same' to leave a symbol unchanged."
                        }
                      },
                      "patternProperties": {
                        "^(?:L|R|S)(?:\\/(?:L|R|S)){5}$": {
                          "type": ["string", "null"],
                          "description": "Head movement directions for 6 tapes (L,R,S each), '/' separated. Value is next state name or null to stay."
                        }
                      },
                      "additionalProperties": false,
                      "if": { "required": ["write"] },
                      "then": { "minProperties": 2, "maxProperties": 2 },
                      "else": { "minProperties": 1, "maxProperties": 1 },
                      "description": "Actions: write symbols then move 6 heads. Include one head-movement key (e.g. 'L/R/S/S/L/R') with next state (or null to stay)."
                    },
                    {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                            "pattern": "^(?:L|R|S)(?:\\/(?:L|R|S)){5}$"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "write": {
                                "type": "string",
                                "pattern": "^(?:same|[^/\\[\\],])(?:\\/(?:same|[^/\\[\\],])){5}$"
                              }
                            },
                            "patternProperties": {
                              "^(?:L|R|S)(?:\\/(?:L|R|S)){5}$": {
                                "type": ["string", "null"]
                              }
                            },
                            "additionalProperties": false,
                            "if": { "required": ["write"] },
                            "then": { "minProperties": 2, "maxProperties": 2 },
                            "else": { "minProperties": 1, "maxProperties": 1 }
                          }
                        ]
                      },
                      "description": "Multiple possible actions for 6 tapes (nondeterministic transitions list)."
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          }
        }
      }
    }
  ]
}